# ============================================================================
# DOCKER CONFIGURATION
# ============================================================================

# docker-compose.yml
---
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: game_postgres
    environment:
      POSTGRES_DB: higgs_domino_game
      POSTGRES_USER: gameuser
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - game_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gameuser -d higgs_domino_game"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: game_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - game_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Node.js API Server
  api_server:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: game_api
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://gameuser:${POSTGRES_PASSWORD}@postgres:5432/higgs_domino_game
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
      CLOUDFLARE_R2_ENDPOINT: ${CLOUDFLARE_R2_ENDPOINT}
      CLOUDFLARE_R2_ACCESS_KEY: ${CLOUDFLARE_R2_ACCESS_KEY}
      CLOUDFLARE_R2_SECRET_KEY: ${CLOUDFLARE_R2_SECRET_KEY}
      PUSH_NOTIFICATION_KEY: ${PUSH_NOTIFICATION_KEY}
      PAYMENT_GATEWAY_KEY: ${PAYMENT_GATEWAY_KEY}
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - game_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # WebSocket Server
  websocket_server:
    build:
      context: ./websocket
      dockerfile: Dockerfile
    container_name: game_websocket
    environment:
      NODE_ENV: production
      PORT: 3001
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      API_SERVER_URL: http://api_server:3000
    ports:
      - "3001:3001"
    depends_on:
      - redis
      - api_server
    networks:
      - game_network
    restart: unless-stopped

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: game_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api_server
      - websocket_server
    networks:
      - game_network
    restart: unless-stopped

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: game_prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - game_network
    restart: unless-stopped

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: game_grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3002:3000"
    depends_on:
      - prometheus
    networks:
      - game_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  game_network:
    driver: bridge

---
# ============================================================================
# KUBERNETES CONFIGURATION
# ============================================================================

# k8s-namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: higgs-domino-game
  labels:
    name: higgs-domino-game

---
# k8s-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: game-config
  namespace: higgs-domino-game
data:
  NODE_ENV: "production"
  API_PORT: "3000"
  WEBSOCKET_PORT: "3001"
  POSTGRES_DB: "higgs_domino_game"
  POSTGRES_USER: "gameuser"
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"

---
# k8s-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: game-secrets
  namespace: higgs-domino-game
type: Opaque
data:
  # Base64 encoded values
  POSTGRES_PASSWORD: cGFzc3dvcmQxMjM=  # password123
  REDIS_PASSWORD: cmVkaXNwYXNzMTIz      # redispass123
  JWT_SECRET: and0c2VjcmV0a2V5MTIzNDU2Nzg5MA==  # jwtsecretkey1234567890
  AWS_ACCESS_KEY_ID: QUtJQUlPU0ZPRE5ON0VYQU1QTEU=
  AWS_SECRET_ACCESS_KEY: d0phbHJYVXRuRkVNSS9LN01ERU5HL2JQeFJmaUNZRVhBTVBMRUtFWQ==

---
# k8s-postgres.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: higgs-domino-game
spec:
  serviceName: postgres-service
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: game-config
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: game-config
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: game-secrets
              key: POSTGRES_PASSWORD
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: higgs-domino-game
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP

---
# k8s-redis.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: higgs-domino-game
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        command: ["redis-server"]
        args: ["--appendonly", "yes", "--requirepass", "$(REDIS_PASSWORD)"]
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: game-secrets
              key: REDIS_PASSWORD
        ports:
        - containerPort: 6379
        resources:
          requests:
            memory: "256Mi"
            cpu: "125m"
          limits:
            memory: "512Mi"
            cpu: "250m"

---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: higgs-domino-game
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP

---
# k8s-api-server.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-server
  namespace: higgs-domino-game
spec:
  replicas: 3
  selector:
    matchLabels:
      app: api-server
  template:
    metadata:
      labels:
        app: api-server
    spec:
      containers:
      - name: api-server
        image: your-registry/game-api:latest
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: game-config
              key: NODE_ENV
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: game-config
              key: API_PORT
        - name: DATABASE_URL
          value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@postgres-service:5432/$(POSTGRES_DB)"
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@redis-service:6379"
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: game-config
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: game-secrets
              key: POSTGRES_PASSWORD
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: game-config
              key: POSTGRES_DB
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: game-secrets
              key: REDIS_PASSWORD
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: game-secrets
              key: JWT_SECRET
        ports:
        - containerPort: 3000
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5

---
apiVersion: v1
kind: Service
metadata:
  name: api-server-service
  namespace: higgs-domino-game
spec:
  selector:
    app: api-server
  ports:
  - port: 3000
    targetPort: 3000
  type: ClusterIP

---
# k8s-websocket-server.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: websocket-server
  namespace: higgs-domino-game
spec:
  replicas: 2
  selector:
    matchLabels:
      app: websocket-server
  template:
    metadata:
      labels:
        app: websocket-server
    spec:
      containers:
      - name: websocket-server
        image: your-registry/game-websocket:latest
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: game-config
              key: NODE_ENV
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: game-config
              key: WEBSOCKET_PORT
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@redis-service:6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: game-secrets
              key: REDIS_PASSWORD
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: game-secrets
              key: JWT_SECRET
        - name: API_SERVER_URL
          value: "http://api-server-service:3000"
        ports:
        - containerPort: 3001
        resources:
          requests:
            memory: "256Mi"
            cpu: "125m"
          limits:
            memory: "512Mi"
            cpu: "250m"

---
apiVersion: v1
kind: Service
metadata:
  name: websocket-server-service
  namespace: higgs-domino-game
spec:
  selector:
    app: websocket-server
  ports:
  - port: 3001
    targetPort: 3001
  type: ClusterIP

---
# k8s-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: game-ingress
  namespace: higgs-domino-game
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    nginx.ingress.kubernetes.io/websocket-services: "websocket-server-service"
spec:
  tls:
  - hosts:
    - api.yourgame.com
    - ws.yourgame.com
    secretName: game-tls-secret
  rules:
  - host: api.yourgame.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: api-server-service
            port:
              number: 3000
  - host: ws.yourgame.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: websocket-server-service
            port:
              number: 3001

---
# ============================================================================
# ENVIRONMENT CONFIGURATIONS
# ============================================================================

# .env.development
NODE_ENV=development
PORT=3000
WEBSOCKET_PORT=3001

# Database
DATABASE_URL=postgresql://gameuser:password123@localhost:5432/higgs_domino_game_dev
POSTGRES_HOST=localhost
POSTGRES_PORT=5432
POSTGRES_DB=higgs_domino_game_dev
POSTGRES_USER=gameuser
POSTGRES_PASSWORD=password123

# Redis
REDIS_URL=redis://localhost:6379
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=

# JWT
JWT_SECRET=your-super-secret-jwt-key-for-development
JWT_EXPIRES_IN=7d
REFRESH_TOKEN_EXPIRES_IN=30d

# File Storage (Development - Local)
FILE_STORAGE_TYPE=local
UPLOAD_PATH=./uploads
MAX_FILE_SIZE=10485760  # 10MB

# External Services (Development)
PUSH_NOTIFICATION_KEY=your-fcm-server-key
PAYMENT_GATEWAY_KEY=your-payment-gateway-key
PAYMENT_GATEWAY_SECRET=your-payment-gateway-secret

# Logging
LOG_LEVEL=debug
LOG_FILE=./logs/app.log

# Rate Limiting
RATE_LIMIT_WINDOW_MS=900000  # 15 minutes
RATE_LIMIT_MAX_REQUESTS=100

# Game Configuration
DEFAULT_STARTING_COINS=10000
DEFAULT_STARTING_GEMS=100
MAX_ROOM_PLAYERS=4
GAME_TIMEOUT_MINUTES=30
MATCHMAKING_TIMEOUT_SECONDS=60

---
# .env.staging
NODE_ENV=staging
PORT=3000
WEBSOCKET_PORT=3001

# Database
DATABASE_URL=postgresql://gameuser:${POSTGRES_PASSWORD}@staging-postgres:5432/higgs_domino_game_staging
POSTGRES_HOST=staging-postgres
POSTGRES_PORT=5432
POSTGRES_DB=higgs_domino_game_staging
POSTGRES_USER=gameuser
POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

# Redis
REDIS_URL=redis://:${REDIS_PASSWORD}@staging-redis:6379
REDIS_HOST=staging-redis
REDIS_PORT=6379
REDIS_PASSWORD=${REDIS_PASSWORD}

# JWT
JWT_SECRET=${JWT_SECRET}
JWT_EXPIRES_IN=7d
REFRESH_TOKEN_EXPIRES_IN=30d

# File Storage (Staging - AWS S3)
FILE_STORAGE_TYPE=s3
AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
AWS_REGION=us-east-1
AWS_S3_BUCKET=higgs-domino-staging

# CloudFlare R2 (Alternative)
CLOUDFLARE_R2_ENDPOINT=${CLOUDFLARE_R2_ENDPOINT}
CLOUDFLARE_R2_ACCESS_KEY=${CLOUDFLARE_R2_ACCESS_KEY}
CLOUDFLARE_R2_SECRET_KEY=${CLOUDFLARE_R2_SECRET_KEY}
CLOUDFLARE_R2_BUCKET=higgs-domino-staging

# CDN
CDN_URL=https://staging-cdn.yourgame.com

# External Services
PUSH_NOTIFICATION_KEY=${PUSH_NOTIFICATION_KEY}
PAYMENT_GATEWAY_KEY=${PAYMENT_GATEWAY_KEY}
PAYMENT_GATEWAY_SECRET=${PAYMENT_GATEWAY_SECRET}

# Logging
LOG_LEVEL=info
LOG_FILE=/var/log/app.log

# Rate Limiting
RATE_LIMIT_WINDOW_MS=900000  # 15 minutes
RATE_LIMIT_MAX_REQUESTS=1000

# Game Configuration
DEFAULT_STARTING_COINS=10000
DEFAULT_STARTING_GEMS=100
MAX_ROOM_PLAYERS=4
GAME_TIMEOUT_MINUTES=30
MATCHMAKING_TIMEOUT_SECONDS=60

---
# .env.production
NODE_ENV=production
PORT=3000
WEBSOCKET_PORT=3001

# Database
DATABASE_URL=postgresql://gameuser:${POSTGRES_PASSWORD}@prod-postgres:5432/higgs_domino_game
POSTGRES_HOST=prod-postgres
POSTGRES_PORT=5432
POSTGRES_DB=higgs_domino_game
POSTGRES_USER=gameuser
POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

# Redis Cluster
REDIS_CLUSTER_NODES=prod-redis-1:6379,prod-redis-2:6379,prod-redis-3:6379
REDIS_PASSWORD=${REDIS_PASSWORD}

# JWT
JWT_SECRET=${JWT_SECRET}
JWT_EXPIRES_IN=7d
REFRESH_TOKEN_EXPIRES_IN=30d

# File Storage (Production - CloudFlare R2)
FILE_STORAGE_TYPE=r2
CLOUDFLARE_R2_ENDPOINT=${CLOUDFLARE_R2_ENDPOINT}
CLOUDFLARE_R2_ACCESS_KEY=${CLOUDFLARE_R2_ACCESS_KEY}
CLOUDFLARE_R2_SECRET_KEY=${CLOUDFLARE_R2_SECRET_KEY}
CLOUDFLARE_R2_BUCKET=higgs-domino-production

# CDN
CDN_URL=https://cdn.yourgame.com
CLOUDFLARE_ZONE_ID=${CLOUDFLARE_ZONE_ID}
CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN}

# External Services
PUSH_NOTIFICATION_KEY=${PUSH_NOTIFICATION_KEY}
APPLE_PUSH_CERT_PATH=/etc/ssl/certs/apple-push.pem
GOOGLE_PLAY_SERVICE_ACCOUNT=/etc/ssl/certs/google-play-service-account.json

# Payment Gateways
PAYMENT_GATEWAY_KEY=${PAYMENT_GATEWAY_KEY}
PAYMENT_GATEWAY_SECRET=${PAYMENT_GATEWAY_SECRET}
STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
PAYPAL_CLIENT_ID=${PAYPAL_CLIENT_ID}
PAYPAL_CLIENT_SECRET=${PAYPAL_CLIENT_SECRET}

# Monitoring
SENTRY_DSN=${SENTRY_DSN}
NEW_RELIC_LICENSE_KEY=${NEW_RELIC_LICENSE_KEY}

# Logging
LOG_LEVEL=warn
LOG_FILE=/var/log/app.log
LOG_MAX_SIZE=100m
LOG_MAX_FILES=10

# Rate Limiting
RATE_LIMIT_WINDOW_MS=900000  # 15 minutes
RATE_LIMIT_MAX_REQUESTS=5000

# Game Configuration
DEFAULT_STARTING_COINS=10000
DEFAULT_STARTING_GEMS=100
MAX_ROOM_PLAYERS=4
GAME_TIMEOUT_MINUTES=30
MATCHMAKING_TIMEOUT_SECONDS=60

# Security
CORS_ORIGIN=https://yourgame.com,https://www.yourgame.com
TRUSTED_PROXIES=10.0.0.0/8,172.16.0.0/12,192.168.0.0/16
SESSION_SECRET=${SESSION_SECRET}

# Performance
CLUSTER_WORKERS=0  # 0 = auto (CPU cores)
MAX_CONNECTIONS_PER_WORKER=1000
KEEP_ALIVE_TIMEOUT=65000

---
# ============================================================================
# NGINX CONFIGURATION
# ============================================================================

# nginx/nginx.conf
events {
    worker_connections 1024;
}

http {
    upstream api_backend {
        least_conn;
        server api_server:3000 max_fails=3 fail_timeout=30s;
        # Add more API servers for load balancing
        # server api_server_2:3000 max_fails=3 fail_timeout=30s;
        # server api_server_3:3000 max_fails=3 fail_timeout=30s;
    }
    
    upstream websocket_backend {
        ip_hash;  # Sticky sessions for WebSocket
        server websocket_server:3001 max_fails=3 fail_timeout=30s;
        # server websocket_server_2:3001 max_fails=3 fail_timeout=30s;
    }
    
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=5r/m;
    
    # API Server
    server {
        listen 80;
        server_name api.yourgame.com;
        
        # Redirect HTTP to HTTPS
        return 301 https://$server_name$request_uri;
    }
    
    server {
        listen 443 ssl http2;
        server_name api.yourgame.com;
        
        ssl_certificate /etc/nginx/ssl/api.yourgame.com.crt;
        ssl_certificate_key /etc/nginx/ssl/api.yourgame.com.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        
        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";
        
        # API routes
        location / {
            limit_req zone=api_limit burst=20 nodelay;
            
            proxy_pass http://api_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }
        
        # Auth routes with stricter rate limiting
        location ~ ^/(auth|register|login) {
            limit_req zone=auth_limit burst=5 nodelay;
            
            proxy_pass http://api_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Health check
        location /health {
            access_log off;
            proxy_pass http://api_backend;
        }
    }
    
    # WebSocket Server
    server {
        listen 80;
        server_name ws.yourgame.com;
        return 301 https://$server_name$request_uri;
    }
    
    server {
        listen 443 ssl http2;
        server_name ws.yourgame.com;
        
        ssl_certificate /etc/nginx/ssl/ws.yourgame.com.crt;
        ssl_certificate_key /etc/nginx/ssl/ws.yourgame.com.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        
        location / {
            proxy_pass http://websocket_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket specific timeouts
            proxy_read_timeout 3600s;
            proxy_send_timeout 3600s;
            proxy_connect_timeout 60s;
        }
    }
}

---
# ============================================================================
# MONITORING CONFIGURATION
# ============================================================================

# monitoring/prometheus.yml
global:
  scrape_interval: 15s
  evaluation_interval: 15s

rule_files:
  - "alert_rules.yml"

alerting:
  alertmanagers:
    - static_configs:
        - targets:
          - alertmanager:9093

scrape_configs:
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']
  
  - job_name: 'api-server'
    static_configs:
      - targets: ['api_server:3000']
    metrics_path: '/metrics'
    scrape_interval: 30s
  
  - job_name: 'websocket-server'
    static_configs:
      - targets: ['websocket_server:3001']
    metrics_path: '/metrics'
    scrape_interval: 30s
  
  - job_name: 'postgres'
    static_configs:
      - targets: ['postgres_exporter:9187']
  
  - job_name: 'redis'
    static_configs:
      - targets: ['redis_exporter:9121']
  
  - job_name: 'nginx'
    static_configs:
      - targets: ['nginx_exporter:9113']

---
# ============================================================================
# DEPLOYMENT SCRIPTS
# ============================================================================

# deploy.sh
#!/bin/bash
set -e

ENVIRONMENT=${1:-staging}
VERSION=${2:-latest}

echo "Deploying to $ENVIRONMENT environment with version $VERSION"

# Build and push Docker images
echo "Building Docker images..."
docker build -t your-registry/game-api:$VERSION ./backend
docker build -t your-registry/game-websocket:$VERSION ./websocket

echo "Pushing Docker images..."
docker push your-registry/game-api:$VERSION
docker push your-registry/game-websocket:$VERSION

# Deploy to Kubernetes
echo "Deploying to Kubernetes..."
kubectl apply -f k8s/namespace.yaml
kubectl apply -f k8s/configmap-$ENVIRONMENT.yaml
kubectl apply -f k8s/secrets-$ENVIRONMENT.yaml
kubectl apply -f k8s/postgres.yaml
kubectl apply -f k8s/redis.yaml

# Update image versions
kubectl set image deployment/api-server api-server=your-registry/game-api:$VERSION -n higgs-domino-game
kubectl set image deployment/websocket-server websocket-server=your-registry/game-websocket:$VERSION -n higgs-domino-game

# Wait for rollout
kubectl rollout status deployment/api-server -n higgs-domino-game
kubectl rollout status deployment/websocket-server -n higgs-domino-game

echo "Deployment completed successfully!"

---
# rollback.sh
#!/bin/bash
set -e

ENVIRONMENT=${1:-staging}
REVISION=${2:-1}

echo "Rolling back $ENVIRONMENT environment to revision $REVISION"

# Rollback deployments
kubectl rollout undo deployment/api-server --to-revision=$REVISION -n higgs-domino-game
kubectl rollout undo deployment/websocket-server --to-revision=$REVISION -n higgs-domino-game

# Wait for rollback
kubectl rollout status deployment/api-server -n higgs-domino-game
kubectl rollout status deployment/websocket-server -n higgs-domino-game

echo "Rollback completed successfully!"

---
# backup.sh
#!/bin/bash
set -e

ENVIRONMENT=${1:-production}
BACKUP_DATE=$(date +%Y%m%d_%H%M%S)
BACKUP_DIR="/backups/$ENVIRONMENT/$BACKUP_DATE"

echo "Creating backup for $ENVIRONMENT environment"

# Create backup directory
mkdir -p $BACKUP_DIR

# Backup PostgreSQL
echo "Backing up PostgreSQL database..."
kubectl exec -n higgs-domino-game postgres-0 -- pg_dump -U gameuser higgs_domino_game > $BACKUP_DIR/postgres_backup.sql

# Backup Redis
echo "Backing up Redis data..."
kubectl exec -n higgs-domino-game deployment/redis -- redis-cli --rdb /tmp/dump.rdb
kubectl cp higgs-domino-game/redis-pod:/tmp/dump.rdb $BACKUP_DIR/redis_backup.rdb

# Compress backup
echo "Compressing backup..."
tar -czf $BACKUP_DIR.tar.gz -C /backups/$ENVIRONMENT $BACKUP_DATE
rm -rf $BACKUP_DIR

# Upload to cloud storage (optional)
echo "Uploading backup to cloud storage..."
# aws s3 cp $BACKUP_DIR.tar.gz s3://your-backup-bucket/

echo "Backup completed: $BACKUP_DIR.tar.gz"