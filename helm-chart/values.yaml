# Default values for higgs-domino.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# Application configuration
app:
  name: higgs-domino
  version: "1.0.0"
  
  # Image configuration
  image:
    registry: ghcr.io
    repository: your-org/higgs-domino
    tag: "latest"
    pullPolicy: IfNotPresent
    pullSecrets: []
  
  # Replica configuration
  replicaCount: 3
  
  # Resource configuration
  resources:
    limits:
      cpu: 2000m
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 1Gi
  
  # Environment variables
  env:
    NODE_ENV: production
    PORT: 3000
    WEBSOCKET_PORT: 3001
    CLUSTER_MODE: true
    NUM_WORKERS: 4
  
  # Secrets (will be created from external secret management)
  secrets:
    jwtSecret: ""
    dbPassword: ""
    redisPassword: ""
    stripeSecretKey: ""
    paypalClientSecret: ""
    emailPassword: ""
    firebasePrivateKey: ""
  
  # Service configuration
  service:
    type: ClusterIP
    ports:
      http: 3000
      websocket: 3001
    annotations: {}
  
  # Ingress configuration
  ingress:
    enabled: true
    className: nginx
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/proxy-body-size: 50m
      nginx.ingress.kubernetes.io/rate-limit: "100"
      cert-manager.io/cluster-issuer: letsencrypt-prod
    hosts:
      - host: higgs-domino.example.com
        paths:
          - path: /
            pathType: Prefix
            service:
              name: higgs-domino
              port: 3000
      - host: api.higgs-domino.example.com
        paths:
          - path: /
            pathType: Prefix
            service:
              name: higgs-domino
              port: 3000
    tls:
      - secretName: higgs-domino-tls
        hosts:
          - higgs-domino.example.com
          - api.higgs-domino.example.com
  
  # Health checks
  livenessProbe:
    httpGet:
      path: /health
      port: 3000
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  
  readinessProbe:
    httpGet:
      path: /health
      port: 3000
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3
  
  startupProbe:
    httpGet:
      path: /health
      port: 3000
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 30
  
  # Security context
  securityContext:
    runAsNonRoot: true
    runAsUser: 1001
    runAsGroup: 1001
    fsGroup: 1001
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
  
  # Pod security context
  podSecurityContext:
    fsGroup: 1001
    seccompProfile:
      type: RuntimeDefault
  
  # Node selector
  nodeSelector: {}
  
  # Tolerations
  tolerations: []
  
  # Affinity
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                    - higgs-domino
            topologyKey: kubernetes.io/hostname
  
  # Volumes
  volumes:
    logs:
      enabled: true
      size: 10Gi
      storageClass: ""
      accessMode: ReadWriteOnce
    uploads:
      enabled: true
      size: 50Gi
      storageClass: ""
      accessMode: ReadWriteOnce
  
  # Autoscaling
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
    behavior:
      scaleDown:
        stabilizationWindowSeconds: 300
        policies:
          - type: Percent
            value: 10
            periodSeconds: 60
      scaleUp:
        stabilizationWindowSeconds: 60
        policies:
          - type: Percent
            value: 50
            periodSeconds: 60
  
  # Pod disruption budget
  podDisruptionBudget:
    enabled: true
    minAvailable: 2

# PostgreSQL configuration
postgresql:
  enabled: true
  auth:
    postgresPassword: "postgres123"
    username: "higgs_user"
    password: "higgs_password"
    database: "higgs_domino"
  architecture: standalone
  primary:
    persistence:
      enabled: true
      size: 100Gi
      storageClass: ""
    resources:
      limits:
        cpu: 2000m
        memory: 4Gi
      requests:
        cpu: 500m
        memory: 2Gi
    initdb:
      scripts:
        01-init.sql: |
          CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
          CREATE EXTENSION IF NOT EXISTS "pgcrypto";
          CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

# Redis configuration
redis:
  enabled: true
  auth:
    enabled: true
    password: "redis123"
  architecture: standalone
  master:
    persistence:
      enabled: true
      size: 20Gi
      storageClass: ""
    resources:
      limits:
        cpu: 1000m
        memory: 2Gi
      requests:
        cpu: 250m
        memory: 1Gi
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

# Prometheus configuration
prometheus:
  enabled: true
  server:
    persistentVolume:
      enabled: true
      size: 50Gi
      storageClass: ""
    resources:
      limits:
        cpu: 1000m
        memory: 2Gi
      requests:
        cpu: 250m
        memory: 1Gi
    retention: "30d"
  alertmanager:
    enabled: true
    persistentVolume:
      enabled: true
      size: 10Gi
  nodeExporter:
    enabled: true
  kubeStateMetrics:
    enabled: true
  pushgateway:
    enabled: false

# Grafana configuration
grafana:
  enabled: true
  persistence:
    enabled: true
    size: 10Gi
    storageClass: ""
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 100m
      memory: 512Mi
  adminPassword: "admin123"
  plugins:
    - grafana-piechart-panel
    - grafana-worldmap-panel
    - grafana-clock-panel
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: 'default'
          orgId: 1
          folder: ''
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/default
  dashboards:
    default:
      higgs-domino:
        gnetId: 1860
        revision: 27
        datasource: Prometheus
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Prometheus
          type: prometheus
          url: http://prometheus-server:80
          access: proxy
          isDefault: true

# Nginx configuration (if using nginx ingress)
nginx:
  enabled: false
  image:
    registry: nginx
    repository: nginx
    tag: "1.25-alpine"
  replicaCount: 2
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 256Mi
  service:
    type: LoadBalancer
    ports:
      http: 80
      https: 443

# Service Monitor for Prometheus
serviceMonitor:
  enabled: true
  namespace: ""
  labels: {}
  interval: 30s
  scrapeTimeout: 10s
  path: /metrics

# Network Policies
networkPolicy:
  enabled: false
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
      ports:
        - protocol: TCP
          port: 3000
        - protocol: TCP
          port: 3001
  egress:
    - to: []
      ports:
        - protocol: TCP
          port: 5432  # PostgreSQL
        - protocol: TCP
          port: 6379  # Redis
        - protocol: TCP
          port: 53    # DNS
        - protocol: UDP
          port: 53    # DNS
        - protocol: TCP
          port: 443   # HTTPS
        - protocol: TCP
          port: 80    # HTTP

# RBAC
rbac:
  create: true
  rules:
    - apiGroups: [""]
      resources: ["pods", "services", "endpoints"]
      verbs: ["get", "list", "watch"]
    - apiGroups: ["apps"]
      resources: ["deployments", "replicasets"]
      verbs: ["get", "list", "watch"]

# Service Account
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Pod Security Policy
podSecurityPolicy:
  enabled: false

# Tests
tests:
  enabled: true
  image:
    registry: curlimages
    repository: curl
    tag: "latest"

# Migration Job
migration:
  enabled: true
  image:
    registry: ghcr.io
    repository: your-org/higgs-domino
    tag: "latest"
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 256Mi
  backoffLimit: 3
  activeDeadlineSeconds: 600

# Backup configuration
backup:
  enabled: true
  schedule: "0 2 * * *"  # Daily at 2 AM
  image:
    registry: postgres
    repository: postgres
    tag: "15-alpine"
  storage:
    size: 100Gi
    storageClass: ""
  retention:
    days: 30
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 256Mi

# External secrets (if using external-secrets operator)
externalSecrets:
  enabled: false
  secretStore:
    name: vault-backend
    kind: SecretStore
  refreshInterval: 1h
  secrets:
    - name: higgs-domino-secrets
      data:
        - secretKey: jwt-secret
          remoteRef:
            key: higgs-domino/jwt
            property: secret
        - secretKey: db-password
          remoteRef:
            key: higgs-domino/database
            property: password

# Istio configuration (if using Istio service mesh)
istio:
  enabled: false
  virtualService:
    enabled: true
    gateways:
      - istio-system/higgs-domino-gateway
    hosts:
      - higgs-domino.example.com
  destinationRule:
    enabled: true
    trafficPolicy:
      loadBalancer:
        simple: LEAST_CONN
  peerAuthentication:
    enabled: true
    mtls:
      mode: STRICT

# Jaeger tracing
jaeger:
  enabled: false
  agent:
    host: jaeger-agent
    port: 6832

# Fluentd logging
fluentd:
  enabled: false
  elasticsearch:
    host: elasticsearch
    port: 9200